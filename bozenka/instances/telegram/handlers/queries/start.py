from aiogram.types import *

from bozenka.instances.telegram.utils.callbacks_factory import *
from bozenka.instances.telegram.utils.keyboards import *
from bozenka.instances.telegram.utils.simpler import list_of_features


async def inline_start(call: CallbackQuery):
    """
    Query, what shows back menu of /start
    :param call:
    :return:
    """
    await call.message.edit_text(
        '–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —è - –ë–æ–∑–µ–Ω—å–∫–∞ üëã\n'
        '–Ø –º—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º (–≤ –±—É–¥—É—â–µ–º –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π) –±–æ—Ç —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π <b>Bozo Developement</b>\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å, {call.from_user.mention_html(name="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}.',
        reply_markup=start_keyboard()
    )


async def inline_start_chatbot(call: CallbackQuery):
    """
    Query, what shows list of Categories, avaible to use as chatbot
    :param call:
    :return:
    """
    await call.message.edit_text("–ü–æ–∂–∞–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏c / –±–∏–±–ª–∏–æ—Ç–µ–∫—É, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è",
                                 reply_markup=gpt_categories_keyboard
                                 (user_id=call.from_user.id))


async def inline_help(call: CallbackQuery):
    """
    Query, what shows information about bozenka and it's development
    :param call:
    :return:
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[[

    ]])
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
                                 reply_markup=help_keyboard())


async def inline_about_developers(call: CallbackQuery):
    """
    Query, what shows information about bozenka and it's development
    :param call:
    :return:
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back")
    ]])
    await call.message.edit_text("–ë–æ–∑–µ–Ω—å–∫–∞ - —ç—Ç–æ –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–≤ –±—É–¥—É—â–µ–º –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç)."
                                 "–û–Ω —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—ã–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏\n"
                                 "–ë–æ–∑–µ—å–Ω–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–≤–∞–µ—Ç—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π, —Å–æ—Å—Ç–∞—è—â–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–∞–º –ø—Ä–æ–µ–∫—Ç –±—ã–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ Python\n"
                                 "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π <b>GPL-3.0</b>. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                                 "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://github.com/kittyneverdies/bozenka/\n"
                                 "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://github.com/kittyneverdies/bozenka/branch/telegram",
                                 reply_markup=kb)


async def inline_add_to_chat(call: CallbackQuery):
    """
    Query, what shows a link to add bozenka into user chat
    :param call:
    :return:
    """
    # Getting bot
    me = await call.message.bot.me()
    # Generating special keyboard
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", url="https://t.me/"
                                         f"{me.username}?"
                                         "startgroup&"
                                         "admin=promote_members+delete_messages+restrict_members+invite_users+pin_messages+manage_video_chats")
    kb.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back"))
    # Answering
    await call.message.edit_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–∑–µ–Ω—å–∫—É –≤ —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                                 reply_markup=kb.as_markup())


async def inline_help_features(call: CallbackQuery, callback_data: HelpCategory):
    """
    Query, what shows list of  features to get support.
    :param call:
    :param callback_data:
    :return:
    """
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
                                 reply_markup=help_category_keyboard(category=callback_data.category_name))


async def inline_back_help_features(call: CallbackQuery, callback_data: HelpBackCategory):
    """
    Query, what shows list of  features to get support.
    :param call:
    :param callback_data:
    :return:
    """
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
                                 reply_markup=help_category_keyboard(category=callback_data.back_to_category))


async def inline_back_help_categories(call: CallbackQuery, callback_data: HelpBack):
    """
    Query, what shows list of  features to get support back.
    :param call:
    :param callback_data:
    :return:
    """
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
                                 reply_markup=help_keyboard())


async def inline_help_feature(call: CallbackQuery, callback_data: HelpFeature):
    """
    Query, what shows list of  features to get support.
    :param call:
    :param callback_data:
    :return:
    """
    await call.message.edit_text(
        list_of_features[callback_data.feature_category][callback_data.feature_index].description,
        reply_markup=help_feature_keyboard(category=callback_data.feature_category))
