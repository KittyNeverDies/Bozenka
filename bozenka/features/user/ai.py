from aiogram import F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bozenka.database.tables.telegram import TelegramChatSettings
from bozenka.features.main import BasicFeature
from bozenka.generative.generative_categories import commands
from bozenka.generative.queue_logic import queue
from bozenka.instances.telegram.filters import IsSettingEnabled
from bozenka.instances.telegram.utils.delete import delete_keyboard
from bozenka.instances.telegram.utils.simpler import AIGeneration


class GptStop(CallbackData, prefix="gs"):
    """
    Callback with information to stop conversation with GPT
    """
    user_id: int


class AiFeature(BasicFeature):

    """
    A class of AI features of the bot
    All staff related to it will be here
    """
    @staticmethod
    async def telegram_ready_to_answer_hanlder(msg: Message, state: FSMContext) -> None:
        """
        Working if user selected his generative AI for generation
        :param msg: Message telegram object
        :param state: FSMContext aiogram object
        :return: None
        """
        await state.set_state(AIGeneration.answering)

        data = await state.get_data()

        message_queue = await msg.reply(
            "–•–æ—Ä–æ—à–æ ‚úÖ\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
            f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{queue.qsize()}/{queue.maxsize}</b>\n"
            f"–ú—ã —Å–æ–æ–±—â–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n",
            reply_markup=delete_keyboard(admin_id=msg.from_user.id)
        )

        await queue.put(({
            "category": data["category"],
            "name": data["name"]
        }, [msg, state, message_queue]))

    @staticmethod
    async def telegram_answering_handler(msg: Message) -> None:
        """
        Working if user send request while we are already answering his question
        :param msg: Message telegram object
        :return: None
        """
        await msg.reply("<b>–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ </b>‚úã\n\n–ú—ã —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—à –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π")

    @staticmethod
    async def cancel_telegram_handler(msg: Message, state: FSMContext) -> None:
        """
        Cancel generation by generative AI
        :param msg: Message telegram object
        :param state: FSMContext aiogram object
        :return: None
        """
        if not await state.get_data():
            return

        await msg.reply("–•–æ—Ä–æ—à–æ ‚úÖ\n\n–ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.\n", keyboard=delete_keyboard(admin_id=msg.from_user.id))

    @staticmethod
    async def telegram_stop_dialog_handler(call: CallbackQuery, callback_data: GptStop, state: FSMContext) -> None:
        """
        Query, what stops dialog
        :param call: CallbackQuery telegram class
        :param callback_data: GptStop class
        :param state: None
        """
        # Checking user_id of user
        if callback_data.user_id != call.from_user.id:
            return
        # Answering something
        await call.answer("–•–æ—Ä–æ—à–æ ‚úÖ")
        current_state = await state.get_state()
        data = await state.get_data() # Getting data from state
        if current_state in [AIGeneration.answering, AIGeneration.ready_to_answer] and data["category"] == "text2text":
            await call.message.edit_text(text=call.message.text + "\n\n–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ\n",
                                         reply_markup=delete_keyboard(admin_id=call.from_user.id))
        elif current_state in [AIGeneration.answering, AIGeneration.ready_to_answer] and data["category"] == "text2text":
            await call.message.edit_caption(caption=call.message.caption + "\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞")
        else:
            await call.message.delete()
        await call.message.answer(
            "–•–æ—Ä–æ—à–æ ‚úÖ\n\n–ú—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.\n",
            keyboard=delete_keyboard(admin_id=call.message.from_user.id))
        # Clearing state
        await state.clear()

    # Telegram feature settings
    telegram_category = "user"
    telegram_commands: dict[str: str] = {}
    telegram_db_name = TelegramChatSettings.ai_working
    telegram_setting_in_list = True
    telegram_setting_name = "–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–µ–∫—Ç ü§ñ"
    current_comands = ""
    for i in commands:
        current_comands += f"/{i.command} - {i.description}\n"
    telegram_setting_description = "<b>–ü—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ü§ñ</b>" \
                                   "\n–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n" \
                                   f"–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<pre>{current_comands}</pre>"
    telegram_cmd_avaible = False  # Is a feature have a commands
    telegram_message_handlers = [
        [cancel_telegram_handler, [Command('cancel')]],
        [telegram_ready_to_answer_hanlder, [F.chat.type == ChatType.PRIVATE, AIGeneration.ready_to_answer]],
        [telegram_ready_to_answer_hanlder, [~(F.chat.type == ChatType.PRIVATE), IsSettingEnabled(telegram_db_name), AIGeneration.ready_to_answer]],
    ]
    telegram_callback_handlers = [
        [telegram_stop_dialog_handler, [GptStop.filter()]]
    ]
